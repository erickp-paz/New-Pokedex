{"version":3,"sources":["eventReceiver.ts"],"names":["DeviceEventEmitter","State","EventType","findHandler","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","dummyStateManager","begin","console","warn","activate","end","fail","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","FAILED","CANCELLED","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","startListening","stopListening","addListener","removeSubscription"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  activate: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  end: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  fail: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n};\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nfunction onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case EventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);\n\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    DeviceEventEmitter.removeSubscription(\n      gestureHandlerStateChangeEventSubscription\n    );\n\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]}